@workInProgress
@ngdoc overview
@name Developer Guide: Angular Formatters: Creating Angular Formatters
@description


To create your own formatter, you can simply register a pair of JavaScript functions with
`angular.formatter`. One of your functions is used to parse text from the input widget into the
data storage format; the other function is used to format stored data into user-readable text.

The following example demonstrates a "reverse" formatter. Data is stored in uppercase and in
reverse, but it is displayed in lower case and non-reversed. When a user edits the data model via
the input widget, the input is automatically parsed into the internal data storage format, and
when the data changes in the model, it is automatically formatted to the user-readable form for
display in the view.

<pre>
function reverse(text) {
var reversed = [];
for (var i = 0; i < text.length; i++) {
reversed.unshift(text.charAt(i));
}
return reversed.join('');
}

angular.formatter('reverse', {
parse: function(value){
return reverse(value||'').toUpperCase();
},
format: function(value){
return reverse(value||'').toLowerCase();
}
});
</pre>

<doc:example>
<doc:source>
<script type="text/javascript">
function reverse(text) {
var reversed = [];
for (var i = 0; i < text.length; i++) {
  reversed.unshift(text.charAt(i));
}
return reversed.join('');
}

angular.formatter('reverse', {
parse: function(value){
  return reverse(value||'').toUpperCase();
},
format: function(value){
  return reverse(value||'').toLowerCase();
}
});
</script>

Formatted:
<input type="text" name="data" value="angular" ng:format="reverse"/>
<br/>

Stored:
<input type="text" name="data"/><br/>
<pre>{{data}}</pre>
</doc:source>
<doc:scenario>
it('should store reverse', function(){
expect(element('.doc-example input:first').val()).toEqual('angular');
expect(element('.doc-example input:last').val()).toEqual('RALUGNA');

this.addFutureAction('change to XYZ', function($window, $document, done){
 $document.elements('.doc-example input:last').val('XYZ').trigger('change');
 done();
});
expect(element('.doc-example input:first').val()).toEqual('zyx');
});
</doc:scenario>
</doc:example>


## Related Topics

* {@link dev_guide.formatters Angular Formatters}
* {@link dev_guide.formatters.using_formatters Using Angular Formatters}

## Related API

* {@link api/angular.Formatter Angular Formatter API}
